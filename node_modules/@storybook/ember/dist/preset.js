"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.core = exports.webpackFinal = exports.addons = void 0;
const node_path_1 = require("node:path");
const common_1 = require("storybook/internal/common");
const builder_webpack5_1 = require("@storybook/builder-webpack5");
const getAbsolutePath = (input) => (0, node_path_1.dirname)(require.resolve((0, node_path_1.join)(input, 'package.json')));
exports.addons = [
    require.resolve('./server/framework-preset-babel-ember'),
    require.resolve('./server/framework-preset-ember-docs'),
];
const webpackFinal = async (baseConfig, options) => {
    const { virtualModules } = await (0, builder_webpack5_1.getVirtualModules)(options);
    const babelOptions = await options.presets.apply('babel', {}, options);
    const typescriptOptions = await options.presets.apply('typescript', {}, options);
    return {
        ...baseConfig,
        module: {
            ...baseConfig.module,
            rules: [
                ...(baseConfig.module?.rules ?? []),
                {
                    test: typescriptOptions.skipCompiler ? /\.((c|m)?jsx?)$/ : /\.((c|m)?(j|t)sx?)$/,
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                cacheDirectory: (0, common_1.resolvePathInStorybookCache)('babel'),
                                ...babelOptions,
                            },
                        },
                    ],
                    include: [(0, common_1.getProjectRoot)()],
                    exclude: [/node_modules/, ...Object.keys(virtualModules)],
                },
            ],
        },
    };
};
exports.webpackFinal = webpackFinal;
const core = async (config, options) => {
    const framework = await options.presets.apply('framework');
    return {
        ...config,
        builder: {
            name: getAbsolutePath('@storybook/builder-webpack5'),
            options: typeof framework === 'string' ? {} : framework.options.builder || {},
        },
    };
};
exports.core = core;
